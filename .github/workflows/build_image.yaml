name: Docker Build and Push

on:
  push:
    branches: [ "main" ]
  schedule:
    - cron: '0 */6 * * *'  # Check every 6 hours

env:
  IMAGE_NAME: ${{ github.repository }}
  REGISTRY: ghcr.io
  DEPENDENCY_REPO: "fernwerker/ownDynDNS"

jobs:
  check_dependency:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.changed }}
    steps:
      - name: Check for updates in ownDynDNS
        id: check
        run: |
          # Get the latest commit hash from fernwerker/ownDynDNS
          LATEST=$(curl -s "https://api.github.com/repos/${{ env.DEPENDENCY_REPO }}/commits/main" | jq -r .sha)
          
          # Create a file to store the hash if it doesn't exist
          mkdir -p .github/dependency-tracking
          HASH_FILE=.github/dependency-tracking/owndyndns-hash
          
          # Get the previous hash if it exists
          if [ -f "$HASH_FILE" ]; then
            PREVIOUS=$(cat $HASH_FILE)
          else
            PREVIOUS=""
          fi
          
          if [ "$LATEST" != "$PREVIOUS" ]; then
            echo "Dependency updated. Previous: $PREVIOUS, Latest: $LATEST"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo $LATEST > $HASH_FILE
          else
            echo "No updates to dependency"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check_dependency
    if: |
      github.event_name == 'push' ||
      github.event_name == 'pull_request' ||
      needs.check_dependency.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'arm64,amd64'

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate version number
        id: version
        run: |
          YEAR_MONTH=$(date +'%Y.%m')
          EXISTING_TAGS=$(git tag -l "${YEAR_MONTH}.*" | wc -l)
          COUNTER=$((EXISTING_TAGS + 1))
          VERSION="${YEAR_MONTH}.${COUNTER}"
          echo "Generated version: $VERSION"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          
          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            git tag $VERSION
            git push origin $VERSION || echo "Failed to push tag, continuing workflow"
          fi

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=${{ steps.version.outputs.version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create Release
        if: github.event_name != 'pull_request'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          generate_release_notes: true
          body: |
            This release was triggered by:
            ${{ github.event_name == 'schedule' && needs.check_dependency.outputs.should_build == 'true' && '- Update in fernwerker/ownDynDNS repository' || '- Direct push to this repository' }}
          token: ${{ secrets.GITHUB_TOKEN }}